Lexical Analyzis==================

TOKENS------------------------
Token { input: "switch", line: 1, column: 0, rule: SWITCH }
Token { input: "(", line: 1, column: 6, rule: OPEN_PARENTHESES }
Token { input: "abc", line: 1, column: 7, rule: IDENTIFIER }
Token { input: ")", line: 1, column: 10, rule: CLOSE_PARENTHESES }
Token { input: "{", line: 1, column: 12, rule: OPEN_BRACES }
Token { input: "case", line: 2, column: 18, rule: CASE }
Token { input: "1", line: 2, column: 23, rule: NUM }
Token { input: ":", line: 2, column: 24, rule: COLON }
Token { input: "a", line: 2, column: 27, rule: IDENTIFIER }
Token { input: "=", line: 2, column: 29, rule: ATTRIBUTION }
Token { input: "a", line: 2, column: 31, rule: IDENTIFIER }
Token { input: "+", line: 2, column: 33, rule: OPERATOR }
Token { input: "1", line: 2, column: 35, rule: NUM }
Token { input: ";", line: 2, column: 36, rule: COMMA }
Token { input: "break", line: 2, column: 38, rule: BREAK }
Token { input: ";", line: 2, column: 43, rule: COMMA }
Token { input: "}", line: 2, column: 45, rule: CLOSE_BRACES }
Token { input: "case", line: 3, column: 51, rule: CASE }
Token { input: "2", line: 3, column: 56, rule: NUM }
Token { input: ":", line: 3, column: 57, rule: COLON }
Token { input: "case", line: 3, column: 59, rule: CASE }
Token { input: "3", line: 3, column: 64, rule: NUM }
Token { input: ":", line: 3, column: 65, rule: COLON }
Token { input: "{", line: 3, column: 67, rule: OPEN_BRACES }
Token { input: "float", line: 3, column: 69, rule: FLOAT_TYPE }
Token { input: "b", line: 3, column: 75, rule: IDENTIFIER }
Token { input: "+=", line: 3, column: 77, rule: ATTRIBUTION }
Token { input: "2", line: 3, column: 80, rule: NUM }
Token { input: ";", line: 3, column: 81, rule: COMMA }
Token { input: "break", line: 3, column: 83, rule: BREAK }
Token { input: ";", line: 3, column: 88, rule: COMMA }
Token { input: "}", line: 3, column: 90, rule: CLOSE_BRACES }
Token { input: "default", line: 4, column: 96, rule: DEFAULT }
Token { input: ":", line: 4, column: 103, rule: COLON }
Token { input: "{", line: 4, column: 106, rule: OPEN_BRACES }
Token { input: "char", line: 4, column: 108, rule: CHAR_TYPE }
Token { input: "a", line: 4, column: 113, rule: IDENTIFIER }
Token { input: "=", line: 4, column: 115, rule: ATTRIBUTION }
Token { input: "\"a\"", line: 4, column: 117, rule: STRING }
Token { input: ";", line: 4, column: 120, rule: COMMA }
Token { input: "}", line: 4, column: 122, rule: CLOSE_BRACES }
Token { input: "}", line: 5, column: 125, rule: CLOSE_BRACES }
Token { input: "if", line: 7, column: 130, rule: IF }
Token { input: "a", line: 7, column: 133, rule: IDENTIFIER }
Token { input: "==", line: 7, column: 135, rule: RELATIONAL_OPERATOR }
Token { input: "1", line: 7, column: 138, rule: NUM }
Token { input: ")", line: 7, column: 139, rule: CLOSE_PARENTHESES }
Token { input: "{", line: 7, column: 141, rule: OPEN_BRACES }
Token { input: "a", line: 8, column: 147, rule: IDENTIFIER }
Token { input: "=", line: 8, column: 149, rule: ATTRIBUTION }
Token { input: "0", line: 8, column: 151, rule: NUM }
Token { input: ";", line: 8, column: 152, rule: COMMA }
Token { input: "int", line: 9, column: 158, rule: INT_TYPE }
Token { input: "a", line: 9, column: 162, rule: IDENTIFIER }
Token { input: "=", line: 9, column: 164, rule: ATTRIBUTION }
Token { input: "2", line: 9, column: 166, rule: NUM }
Token { input: ";", line: 9, column: 167, rule: COMMA }
Token { input: "a", line: 10, column: 181, rule: IDENTIFIER }
Token { input: "++", line: 10, column: 182, rule: UNARY }
Token { input: ";", line: 10, column: 184, rule: COMMA }
Token { input: "b", line: 11, column: 190, rule: IDENTIFIER }
Token { input: "+=", line: 11, column: 191, rule: ATTRIBUTION }
Token { input: "1", line: 11, column: 193, rule: NUM }
Token { input: "}", line: 12, column: 196, rule: CLOSE_BRACES }
Token { input: "else", line: 14, column: 201, rule: ELSE }
Token { input: "{", line: 14, column: 206, rule: OPEN_BRACES }
Token { input: "char", line: 15, column: 212, rule: CHAR_TYPE }
Token { input: "c", line: 15, column: 217, rule: IDENTIFIER }
Token { input: "=", line: 15, column: 219, rule: ATTRIBUTION }
Token { input: "\"a\"", line: 15, column: 221, rule: STRING }
Token { input: "}", line: 16, column: 226, rule: CLOSE_BRACES }
Token { input: "else", line: 17, column: 229, rule: ELSE }
Token { input: "{", line: 17, column: 234, rule: OPEN_BRACES }
Token { input: "char", line: 18, column: 240, rule: CHAR_TYPE }
Token { input: "c", line: 18, column: 245, rule: IDENTIFIER }
Token { input: "=", line: 18, column: 247, rule: ATTRIBUTION }
Token { input: "\"a\"", line: 18, column: 249, rule: STRING }
Token { input: ";", line: 18, column: 252, rule: COMMA }
Token { input: "}", line: 19, column: 255, rule: CLOSE_BRACES }
Token { input: "while", line: 20, column: 258, rule: WHILE_FUNCTION }
Token { input: "(", line: 20, column: 263, rule: OPEN_PARENTHESES }
Token { input: "a", line: 20, column: 264, rule: IDENTIFIER }
Token { input: "==", line: 20, column: 266, rule: RELATIONAL_OPERATOR }
Token { input: "1", line: 20, column: 269, rule: NUM }
Token { input: ")", line: 20, column: 270, rule: CLOSE_PARENTHESES }
Token { input: "{", line: 20, column: 272, rule: OPEN_BRACES }
Token { input: "int", line: 21, column: 278, rule: INT_TYPE }
Token { input: "b", line: 21, column: 282, rule: IDENTIFIER }
Token { input: "=", line: 21, column: 284, rule: ATTRIBUTION }
Token { input: "12", line: 21, column: 286, rule: NUM }
Token { input: ";", line: 21, column: 288, rule: COMMA }
Token { input: "}", line: 22, column: 291, rule: CLOSE_BRACES }
Token { input: "for", line: 23, column: 294, rule: FOR_FUNCTION }
Token { input: "(", line: 23, column: 297, rule: OPEN_PARENTHESES }
Token { input: "int", line: 23, column: 298, rule: INT_TYPE }
Token { input: "b", line: 23, column: 302, rule: IDENTIFIER }
Token { input: "=", line: 23, column: 304, rule: ATTRIBUTION }
Token { input: "0", line: 23, column: 306, rule: NUM }
Token { input: ";", line: 23, column: 307, rule: COMMA }
Token { input: "b", line: 23, column: 309, rule: IDENTIFIER }
Token { input: "<", line: 23, column: 311, rule: RELATIONAL_OPERATOR }
Token { input: "10", line: 23, column: 313, rule: NUM }
Token { input: ";", line: 23, column: 315, rule: COMMA }
Token { input: "b", line: 23, column: 317, rule: IDENTIFIER }
Token { input: "++", line: 23, column: 318, rule: UNARY }
Token { input: ")", line: 23, column: 320, rule: CLOSE_PARENTHESES }
Token { input: "{", line: 23, column: 322, rule: OPEN_BRACES }
Token { input: "char", line: 24, column: 328, rule: CHAR_TYPE }
Token { input: "c", line: 24, column: 333, rule: IDENTIFIER }
Token { input: "=", line: 24, column: 335, rule: ATTRIBUTION }
Token { input: "\"c\"", line: 24, column: 337, rule: STRING }
Token { input: ";", line: 24, column: 340, rule: COMMA }
Token { input: "}", line: 25, column: 343, rule: CLOSE_BRACES }
Token { input: "EndOfInput", line: 26, column: 346, rule: END }

Lexical ERRORS------------------------

Syntactical Analyzis==================
Syntax ERRORS------------------------
Token: Token { input: "}", line: 2, column: 45, rule: CLOSE_BRACES } Message: BRACES ERROR
Token: Token { input: "a", line: 7, column: 133, rule: IDENTIFIER } Message: OPEN PARENTHESES EXPECTED
Token: Token { input: "1", line: 11, column: 193, rule: NUM } Message: EXPECTED COMMA
Token: Token { input: "\"a\"", line: 15, column: 221, rule: STRING } Message: EXPECTED COMMA
Token: Token { input: "else", line: 17, column: 229, rule: ELSE } Message: ELSE WITHOUT IF

Output: 
switch(abc) {
   case 1:  a = a + 1; break; } <--- Syntax Error || Message: BRACES ERROR
   case 2: case 3: { float b += 2; break; }
   default:  { char a = "a"; }
}

if a == 1) { <--- Syntax Error || Message: OPEN PARENTHESES EXPECTED
   a = 0;
   int a = 2;//asdasd
   a++;
   b+=1 <--- Syntax Error || Message: EXPECTED COMMA
}

else {
   char c = "a" <--- Syntax Error || Message: EXPECTED COMMA
}
else { <--- Syntax Error || Message: ELSE WITHOUT IF
   char c = "a";
}
while(a == 1) {
   int b = 12;
}
for(int b = 0; b < 10; b++) {
   char c = "c";
}

