Lexical Analyzis==================

TOKENS------------------------
Token { input: "if", line: 1, column: 0, rule: IF }
Token { input: "(", line: 1, column: 2, rule: OPEN_PARENTHESES }
Token { input: "a", line: 1, column: 3, rule: IDENTIFIER }
Token { input: "==", line: 1, column: 5, rule: CONDITIONAL }
Token { input: "1", line: 1, column: 8, rule: NUM }
Token { input: ")", line: 1, column: 9, rule: CLOSE_PARENTHESES }
Token { input: "{", line: 1, column: 11, rule: OPEN_BRACES }
Token { input: "a", line: 2, column: 17, rule: IDENTIFIER }
Token { input: "=", line: 2, column: 19, rule: ATTRIBUTION }
Token { input: "0", line: 2, column: 21, rule: NUM }
Token { input: "int", line: 3, column: 27, rule: INT_TYPE }
Token { input: "a", line: 3, column: 31, rule: IDENTIFIER }
Token { input: "=", line: 3, column: 33, rule: ATTRIBUTION }
Token { input: "2", line: 3, column: 35, rule: NUM }
Token { input: ";", line: 3, column: 36, rule: COMMA }
Token { input: "a", line: 4, column: 50, rule: IDENTIFIER }
Token { input: "++", line: 4, column: 51, rule: UNARY }
Token { input: ";", line: 4, column: 53, rule: COMMA }
Token { input: "b", line: 5, column: 59, rule: IDENTIFIER }
Token { input: "+=", line: 5, column: 60, rule: ATTRIBUTION }
Token { input: "1", line: 5, column: 62, rule: NUM }
Token { input: ";", line: 5, column: 63, rule: COMMA }
Token { input: "}", line: 6, column: 66, rule: CLOSE_BRACES }
Token { input: "else", line: 7, column: 69, rule: ELSE }
Token { input: "{", line: 7, column: 74, rule: OPEN_BRACES }
Token { input: "char", line: 8, column: 80, rule: CHAR_TYPE }
Token { input: "c", line: 8, column: 85, rule: IDENTIFIER }
Token { input: "=", line: 8, column: 87, rule: ATTRIBUTION }
Token { input: "\"a\"", line: 8, column: 89, rule: STRING }
Token { input: ";", line: 8, column: 92, rule: COMMA }
Token { input: "}", line: 9, column: 95, rule: CLOSE_BRACES }
Token { input: "switch", line: 10, column: 98, rule: SWITCH }
Token { input: "(", line: 10, column: 104, rule: OPEN_PARENTHESES }
Token { input: "abc", line: 10, column: 105, rule: IDENTIFIER }
Token { input: ")", line: 10, column: 108, rule: CLOSE_PARENTHESES }
Token { input: "{", line: 10, column: 110, rule: OPEN_BRACES }
Token { input: "case", line: 11, column: 116, rule: CASE }
Token { input: "1", line: 11, column: 121, rule: NUM }
Token { input: ":", line: 11, column: 122, rule: COLON }
Token { input: "{", line: 11, column: 124, rule: OPEN_BRACES }
Token { input: "a", line: 11, column: 126, rule: IDENTIFIER }
Token { input: "=", line: 11, column: 128, rule: ATTRIBUTION }
Token { input: "a", line: 11, column: 130, rule: IDENTIFIER }
Token { input: "+", line: 11, column: 132, rule: OPERATOR }
Token { input: "1", line: 11, column: 134, rule: NUM }
Token { input: ";", line: 11, column: 135, rule: COMMA }
Token { input: "break", line: 11, column: 137, rule: BREAK }
Token { input: ";", line: 11, column: 142, rule: COMMA }
Token { input: "}", line: 11, column: 144, rule: CLOSE_BRACES }
Token { input: "case", line: 12, column: 150, rule: CASE }
Token { input: "2", line: 12, column: 155, rule: NUM }
Token { input: ":", line: 12, column: 156, rule: COLON }
Token { input: "case", line: 12, column: 158, rule: CASE }
Token { input: "3", line: 12, column: 163, rule: NUM }
Token { input: ":", line: 12, column: 164, rule: COLON }
Token { input: "{", line: 12, column: 166, rule: OPEN_BRACES }
Token { input: "float", line: 12, column: 168, rule: FLOAT_TYPE }
Token { input: "b", line: 12, column: 174, rule: IDENTIFIER }
Token { input: "+=", line: 12, column: 176, rule: ATTRIBUTION }
Token { input: "2", line: 12, column: 179, rule: NUM }
Token { input: ";", line: 12, column: 180, rule: COMMA }
Token { input: "break", line: 12, column: 182, rule: BREAK }
Token { input: ";", line: 12, column: 187, rule: COMMA }
Token { input: "}", line: 12, column: 189, rule: CLOSE_BRACES }
Token { input: "default", line: 13, column: 195, rule: DEFAULT }
Token { input: ":", line: 13, column: 202, rule: COLON }
Token { input: "{", line: 13, column: 204, rule: OPEN_BRACES }
Token { input: "char", line: 13, column: 206, rule: CHAR_TYPE }
Token { input: "a", line: 13, column: 211, rule: IDENTIFIER }
Token { input: "=", line: 13, column: 213, rule: ATTRIBUTION }
Token { input: "\"a\"", line: 13, column: 215, rule: STRING }
Token { input: ";", line: 13, column: 218, rule: COMMA }
Token { input: "}", line: 13, column: 220, rule: CLOSE_BRACES }
Token { input: "}", line: 14, column: 223, rule: CLOSE_BRACES }
Token { input: "while", line: 15, column: 226, rule: WHILE_FUNCTION }
Token { input: "(", line: 15, column: 231, rule: OPEN_PARENTHESES }
Token { input: "a", line: 15, column: 232, rule: IDENTIFIER }
Token { input: "==", line: 15, column: 234, rule: CONDITIONAL }
Token { input: "1", line: 15, column: 237, rule: NUM }
Token { input: ")", line: 15, column: 238, rule: CLOSE_PARENTHESES }
Token { input: "{", line: 15, column: 240, rule: OPEN_BRACES }
Token { input: "int", line: 16, column: 246, rule: INT_TYPE }
Token { input: "b", line: 16, column: 250, rule: IDENTIFIER }
Token { input: "=", line: 16, column: 252, rule: ATTRIBUTION }
Token { input: "12", line: 16, column: 254, rule: NUM }
Token { input: ";", line: 16, column: 256, rule: COMMA }
Token { input: "}", line: 17, column: 259, rule: CLOSE_BRACES }
Token { input: "for", line: 18, column: 262, rule: FOR_FUNCTION }
Token { input: "(", line: 18, column: 265, rule: OPEN_PARENTHESES }
Token { input: "int", line: 18, column: 266, rule: INT_TYPE }
Token { input: "b", line: 18, column: 270, rule: IDENTIFIER }
Token { input: "=", line: 18, column: 272, rule: ATTRIBUTION }
Token { input: "0", line: 18, column: 274, rule: NUM }
Token { input: ";", line: 18, column: 275, rule: COMMA }
Token { input: "b", line: 18, column: 277, rule: IDENTIFIER }
Token { input: "<", line: 18, column: 279, rule: CONDITIONAL }
Token { input: "10", line: 18, column: 281, rule: NUM }
Token { input: ";", line: 18, column: 283, rule: COMMA }
Token { input: "b", line: 18, column: 285, rule: IDENTIFIER }
Token { input: "++", line: 18, column: 286, rule: UNARY }
Token { input: ")", line: 18, column: 288, rule: CLOSE_PARENTHESES }
Token { input: "{", line: 18, column: 290, rule: OPEN_BRACES }
Token { input: "char", line: 19, column: 296, rule: CHAR_TYPE }
Token { input: "c", line: 19, column: 301, rule: IDENTIFIER }
Token { input: "=", line: 19, column: 303, rule: ATTRIBUTION }
Token { input: "\"c\"", line: 19, column: 305, rule: STRING }
Token { input: ";", line: 19, column: 308, rule: COMMA }
Token { input: "}", line: 20, column: 311, rule: CLOSE_BRACES }
Token { input: "$end$", line: 20, column: 312, rule: END }

Lexical ERRORS------------------------

Syntactical Analyzis==================
Syntax ERRORS------------------------
Token: Token { input: "int", line: 3, column: 27, rule: INT_TYPE } Message: FAILED TO PARSE COMMAND

Output: 
if(a == 1) {
   a = 0
   int a = 2;//asdasd <--- Syntax ERROR
   a++;
   b+=1;
}
else {
   char c = "a";
}
switch(abc) {
   case 1: { a = a + 1; break; }
   case 2: case 3: { float b += 2; break; }
   default: { char a = "a"; }
}
while(a == 1) {
   int b = 12;
}
for(int b = 0; b < 10; b++) {
   char c = "c";
}

